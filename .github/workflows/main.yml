name: Release
on:
  push:
    branches:
      - master
  pull_request:
    types:
      - labeled
jobs:
  bump:
    if: github.event.action == 'labeled'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: haya14busa/action-bumpr@v1
  release:
    if: github.event.action != 'labeled'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Bump version on merging Pull Requests with specific labels. (bump:major,bump:minor,bump:patch)
      - id: bumpr
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: haya14busa/action-bumpr@v1

      # Get tag name.
      - id: tag
        uses: haya14busa/action-cond@v1
        with:
          cond: "${{ startsWith(github.ref, 'refs/tags/') }}"
          if_true: ${{ github.ref }}
          if_false: ${{ steps.bumpr.outputs.next_version }}

      # Create release.
      - uses: actions/create-release@v1
        id: create_release
        if: "steps.tag.outputs.value != ''"
        env:
          # This token is provided by Actions, you do not need to create your own token
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.value }}
          release_name: Release ${{ steps.tag.outputs.value }}
          body: ${{ steps.bumpr.outputs.message }}
          draft: false
          prerelease: false

      - uses: actions/setup-go@v2
        with:
          go-version: 1.17.x

      # Build release
      - name: Build project
        if: "steps.tag.outputs.value != ''"
        env:
          RELEASE_VERSION: ${{ steps.tag.outputs.value }}
        run: |
          ./scripts/build.sh

      # Deploy Docker release
      - name: Deploy Docker image
        if: "steps.tag.outputs.value != ''"
        env:
          IMAGE_NAME: ${{ github.repository }}
          RELEASE_VERSION: ${{ steps.tag.outputs.value }}
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
          GH_USER: ${{ github.actor }}
          GH_PASS: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./scripts/deploy.sh

      - name: Upload Linux 386
        id: upload-release-l386
        if: "steps.tag.outputs.value != ''"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./gulp.linux-386.tar.gz
          asset_name: gulp.linux-386.tar.gz
          asset_content_type: application/gzip

      - name: Upload Linux amd64
        id: upload-release-l64
        uses: actions/upload-release-asset@v1
        if: "steps.tag.outputs.value != ''"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./gulp.linux-amd64.tar.gz
          asset_name: gulp.linux-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Darwin amd64
        id: upload-release-d64
        if: "steps.tag.outputs.value != ''"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./gulp.darwin-amd64.tar.gz
          asset_name: gulp.darwin-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Darwin arm64
        id: upload-release-dArm64
        if: "steps.tag.outputs.value != ''"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./gulp.darwin-arm64.tar.gz
          asset_name: gulp.darwin-arm64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows
        id: upload-release-w
        if: "steps.tag.outputs.value != ''"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./gulp.windows.zip
          asset_name: gulp.windows.zip
          asset_content_type: application/zip
